rm(list = ls())
setwd('~/Desktop/lung_PTX/R_scripts/')
getwd()
# install package
library(dplyr)
library(ggplot2)
if (require(MAGeCKFlute) == F){
BiocManager::install('MAGeCKFlute')
}else{
library(MAGeCKFlute)
}
if (require(sva) == F){
BiocManager::install('sva')
}else{
library(sva)
}
if (require(sva) == F){
BiocManager::install('sva')
}else{
library(sva)
}
# install package
library(dplyr)
library(ggplot2)
if (require(MAGeCKFlute) == F){
BiocManager::install('MAGeCKFlute')
}else{
library(MAGeCKFlute)
}
if (require(sva) == F){
BiocManager::install('sva')
}else{
library(sva)
}
# raw data input
raw_count <- read.csv('../sgRNA_count_test123.count.txt', sep = '\t', header = T)
View(raw_count)
# QC
sgrna_countsummary <- read.csv('../sgRNA_count_test123.countsummary.txt', sep = '\t', header = T)
View(sgrna_countsummary)
QC <- function(countsummary){
BarView(countsummary, x = "Label", y = "GiniIndex",ylab = "Gini index", main = "Evenness of sgRNA reads")
ggsave(path = './count_QC_result', filename = 'GiniIndex.pdf')
countsummary$Missed = log10(countsummary$Zerocounts)
BarView(countsummary, x = "Label", y = "Missed", fill = "#394E12",ylab = "Log10 missed gRNAs", main = "Missed sgRNAs")
ggsave(path = './count_QC_result', filename = 'Missed_sgrna.pdf')
MapRatesView(countsummary)
ggsave(path = './count_QC_result', filename = 'MapRates.pdf')
}
QC(sgrna_countsummary)
QC <- function(countsummary){
BarView(countsummary, x = "Label", y = "GiniIndex",ylab = "Gini index", main = "Evenness of sgRNA reads")
ggsave(path = './count_QC_result', filename = 'GiniIndex.pdf', width = 50, units = 'cm')
countsummary$Missed = log10(countsummary$Zerocounts)
BarView(countsummary, x = "Label", y = "Missed", fill = "#394E12",ylab = "Log10 missed gRNAs", main = "Missed sgRNAs")
ggsave(path = './count_QC_result', filename = 'Missed_sgrna.pdf', width = 50, units = 'cm')
MapRatesView(countsummary)
ggsave(path = './count_QC_result', filename = 'MapRates.pdf', width = 50, units = 'cm')
}
QC(sgrna_countsummary)
QC <- function(countsummary){
BarView(countsummary, x = "Label", y = "GiniIndex",ylab = "Gini index", main = "Evenness of sgRNA reads")
ggsave(path = './count_QC_result', filename = 'GiniIndex.pdf', width = 30, units = 'cm')
countsummary$Missed = log10(countsummary$Zerocounts)
BarView(countsummary, x = "Label", y = "Missed", fill = "#394E12",ylab = "Log10 missed gRNAs", main = "Missed sgRNAs")
ggsave(path = './count_QC_result', filename = 'Missed_sgrna.pdf', width = 30, units = 'cm')
MapRatesView(countsummary)
ggsave(path = './count_QC_result', filename = 'MapRates.pdf', width = 30, units = 'cm')
}
QC(sgrna_countsummary)
library(clusterProfiler)
library(org.Hs.eg.db)
require(clusterProfiler)
detach(name = MAGeCKFlute)
detach(name = 'MAGeCKFlute')
rm(list = ls())
setwd('~/Desktop/lung_PTX/R_scripts/')
getwd()
# install package
library(dplyr)
library(ggplot2)
library(clusterProfiler)
detach('package:MAGeCKFlute')
library(clusterProfiler)
unloadNamespace('clusterProfiler')
unloadNamespace('MAGeCKFlute')
library(clusterProfiler)
library(clusterProfiler)
library(org.Hs.eg.db)
unloadNamespace(c('MAGeCKFlute', 'AnnotationDbi'))
library(clusterProfiler)
library(org.Hs.eg.db)
unloadNamespace('MAGeCKFlute')
library(clusterProfiler)
unloadNamespace('MAGeCKFlute')
library(clusterProfiler)
# library(org.Hs.eg.db)
The_list_of_core_essential_genes <- read.table('../The_list_of_core_essential_genes.txt', fileEncoding = 'utf-16le', header = T)
View(The_list_of_core_essential_genes)
# install package
library(dplyr)
library(ggplot2)
if (require(MAGeCKFlute) == F){
BiocManager::install('MAGeCKFlute')
}else{
library(MAGeCKFlute)
}
if (require(sva) == F){
BiocManager::install('sva')
}else{
library(sva)
}
# raw data input
raw_count <- read.csv('../sgRNA_count_test123.count.txt', sep = '\t', header = T)
# QC
sgrna_countsummary <- read.csv('../sgRNA_count_test123.countsummary.txt', sep = '\t', header = T)
QC <- function(countsummary){
BarView(countsummary, x = "Label", y = "GiniIndex",ylab = "Gini index", main = "Evenness of sgRNA reads")
ggsave(path = './count_QC_result', filename = 'GiniIndex.pdf', width = 30, units = 'cm')
countsummary$Missed = log10(countsummary$Zerocounts)
BarView(countsummary, x = "Label", y = "Missed", fill = "#394E12",ylab = "Log10 missed gRNAs", main = "Missed sgRNAs")
ggsave(path = './count_QC_result', filename = 'Missed_sgrna.pdf', width = 30, units = 'cm')
MapRatesView(countsummary)
ggsave(path = './count_QC_result', filename = 'MapRates.pdf', width = 30, units = 'cm')
}
QC(sgrna_countsummary)
unloadNamespace('MAGeCKFlute')
library(clusterProfiler)
df <- tibble(
a = rnorm(10),
b = rnorm(10),
c = rnorm(10),
d = rnorm(10)
)
View(df)
df[1]
df[[1]]
calc_median <- function(df){
output <- vector(mode = 'double', length = ncol(df))
for(i in ncol(df)){
output[[i]] = median(df[[i]])
}
return(output)
}
res <- calc_median(df)
calc <- function(lst){
size_factor <- median(lst)
for(i in lst){
lst[i] <- i/size_factor
}
print(lst)
}
calc(lst1)
lst1 <- c(1, 2, 3, 4, 5)
calc(lst1)
lst1 <- c(1, 5, 3, 2, 5)
calc(lst1)
calc <- function(lst){
size_factor <- median(lst)
print(size_factor)
for(i in lst){
lst[i] <- i/size_factor
}
print(lst)
}
lst1 <- c(1, 5, 3, 2, 5)
calc(lst1)
calc <- function(lst){
size_factor <- median(lst)
print(size_factor)
for(i in lst){
lst[i] <- i/size_factor
}
print(lst)
}
lst1 <- c(1, 5, 3, 2, 4)
calc(lst1)
calc_normalization <- function(lst){
size_factor <- median(lst)
print(size_factor)
for(i in lst){
lst[i] <- i/size_factor
}
print(lst)
}
calc(c(1, 5, 3, 2, 4))
# 通常，在for循环中我们会用元素来进行循环，比如上面的(i in list)
# 但是这种循环模式并不适用所有情况
# 也可以使用名称进行循环，(nm in name(x))
# 这种方式会给出一个名称，从而使用x[[nm]]来访问我们想要的数据，这在画图之类的上面十分方便
# 与元素循环不一样的是，我们需要特别的方法来定义名称循环的输出向量
res <- vector('list', length(x))
# 有时候在for循环中，我们并不知道输出的长度是多少
# 当然可以在循环当中采取不断合并的操作，但是这样每次循环都需要复制一遍上次的数据
# 可以使用列表来储存这些变化的数据，最后在循环外进行一次性的合并
means <- c(0, 1, 2)
output <- vector('list', length(means))
# 有时候在for循环中，我们并不知道输出的长度是多少
# 当然可以在循环当中采取不断合并的操作，但是这样每次循环都需要复制一遍上次的数据
# 可以使用列表来储存这些变化的数据，最后在循环外进行一次性的合并
means <- c(0, 1, 2)
output <- vector('list', length(means))
for(i in length(means)){
n <- sample(100, 1)
output[[i]] <- rnorm(n, means[[i]])
}
unlist(output)
purrr::flatten_dbl(output)
# downstream functional analysis
mle_result <- read.csv('../all_test123.mle.gene_summary.txt', sep = '\t', header = T)
View(mle_result)
# library(org.Hs.eg.db)
The_list_of_core_essential_genes <- read.table('../The_list_of_core_essential_genes.txt', fileEncoding = 'utf-16le', header = T)
# cell_cycle normalization
FluteMLE('../all_test123.mle.gene_summary.txt', ctrlname = 'DMSO', treatname = 'PTX', pathview.top = 50, cell_lines = 'A549', top = 5, omitEssential = T, proj = 'all_123',
enrich_method = 'HGT', scale_cutoff = 2, verbose = T, posControl = The_list_of_core_essential_genes$hgnc_symbol)
if (require(MAGeCKFlute) == F){
BiocManager::install('MAGeCKFlute')
}else{
library(MAGeCKFlute)
}
# cell_cycle normalization
FluteMLE('../all_test123.mle.gene_summary.txt', ctrlname = 'DMSO', treatname = 'PTX', pathview.top = 50, cell_lines = 'A549', top = 5, omitEssential = T, proj = 'all_123',
enrich_method = 'HGT', scale_cutoff = 2, verbose = T, posControl = The_list_of_core_essential_genes$hgnc_symbol)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.fdr < 0.05)
View(mle_result_significant)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.fdr < 0.1)
View(mle_result_significant)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.fdr < 0.15)
View(mle_result_significant)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.fdr < 0.2)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.fdr < 0.2, mle_result$PTX.wald.p.value < 0.01)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01, mle_result$PTX.wald.fdr < 0.2)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01)
View(mle_result_significant)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.05)
ScatterView
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01)
# downstream functional analysis
mle_result <- read.csv('../all_test123.mle.gene_summary.txt', sep = '\t', header = T)
unloadNamespace('MAGeCKFlute')
library(clusterProfiler)
# library(org.Hs.eg.db)
The_list_of_core_essential_genes <- read.table('../The_list_of_core_essential_genes.txt', fileEncoding = 'utf-16le', header = T)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01)
View(mle_result_significant)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.001)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
library(org.Hs.eg.db)
library(AnnotationDbi)
library(MAGeCKFlute)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
id_list <- na.omit(id_list)
# perform go enrichment
go_enrich <- enrichGO(
gene = id_list,
OrgDb = org.Hs.eg.db,
keyType = 'ENTREZID',
ont = 'ALL',
pAdjustMethod = 'fdr',
pvalueCutoff = 0.05,
qvalueCutoff = 0.1,
readable = T
)
library(org.Hs.eg.db)
# install package
library(dplyr)
library(ggplot2)
library(org.Hs.eg.db)
library(org.Hs.eg.db)
if (require(MAGeCKFlute) == F){
BiocManager::install('MAGeCKFlute')
}else{
library(MAGeCKFlute)
}
library(clusterProfiler)
# downstream functional analysis
mle_result <- read.csv('../all_test123.mle.gene_summary.txt', sep = '\t', header = T)
# unloadNamespace('MAGeCKFlute')
# library(org.Hs.eg.db)
The_list_of_core_essential_genes <- read.table('../The_list_of_core_essential_genes.txt', fileEncoding = 'utf-16le', header = T)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
id_list <- na.omit(id_list)
# perform go enrichment
go_enrich <- enrichGO(
gene = id_list,
OrgDb = org.Hs.eg.db,
keyType = 'ENTREZID',
ont = 'ALL',
pAdjustMethod = 'fdr',
pvalueCutoff = 0.05,
qvalueCutoff = 0.1,
readable = T
)
go_enrich <- data.frame(go_enrich)
View(go_enrich)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.005)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
id_list <- na.omit(id_list)
# perform go enrichment
go_enrich <- enrichGO(
gene = id_list,
OrgDb = org.Hs.eg.db,
keyType = 'ENTREZID',
ont = 'ALL',
pAdjustMethod = 'fdr',
pvalueCutoff = 0.05,
qvalueCutoff = 0.1,
readable = T
)
go_enrich <- data.frame(go_enrich)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.001)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
id_list <- na.omit(id_list)
# perform go enrichment
go_enrich <- enrichGO(
gene = id_list,
OrgDb = org.Hs.eg.db,
keyType = 'ENTREZID',
ont = 'ALL',
pAdjustMethod = 'fdr',
pvalueCutoff = 0.01,
qvalueCutoff = 0.05,
readable = T
)
go_enrich <- data.frame(go_enrich)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
id_list <- na.omit(id_list)
# perform go enrichment
go_enrich <- enrichGO(
gene = id_list,
OrgDb = org.Hs.eg.db,
keyType = 'ENTREZID',
ont = 'ALL',
pAdjustMethod = 'fdr',
pvalueCutoff = 0.01,
qvalueCutoff = 0.05,
readable = T
)
go_enrich <- data.frame(go_enrich)
View(go_enrich)
?go_enrich
?enrichGO
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.fdr < 0.05)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
id_list <- na.omit(id_list)
# perform go enrichment
go_enrich <- enrichGO(
gene = id_list,
OrgDb = org.Hs.eg.db,
keyType = 'ENTREZID',
ont = 'ALL',
pAdjustMethod = 'BH',
pvalueCutoff = 0.01,
qvalueCutoff = 0.05,
readable = T
)
go_enrich <- data.frame(go_enrich)
View(go_enrich)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.fdr < 0.2)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
id_list <- na.omit(id_list)
# perform go enrichment
go_enrich <- enrichGO(
gene = id_list,
OrgDb = org.Hs.eg.db,
keyType = 'ENTREZID',
ont = 'ALL',
pAdjustMethod = 'BH',
pvalueCutoff = 0.01,
qvalueCutoff = 0.05,
readable = T
)
go_enrich <- data.frame(go_enrich)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.p.value < 0.01)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
id_list <- na.omit(id_list)
# perform go enrichment
go_enrich <- enrichGO(
gene = id_list,
OrgDb = org.Hs.eg.db,
keyType = 'ENTREZID',
ont = 'ALL',
pAdjustMethod = 'BH',
pvalueCutoff = 0.01,
qvalueCutoff = 0.05,
readable = T
)
go_enrich <- data.frame(go_enrich)
kegg_enrich <- enrichKEGG(
gene = id_list,
organism = 'hsa',
keyType = 'kegg',
pAdjustMethod = 'BH',
pvalueCutoff = 0.01,
qvalueCutoff = 0.05,
minGSSize = 2,
maxGSSize = 200,
use_internal_data = F
)
kegg_enrich <- setReadable(kegg_enrich, OrgDb = org.Hs.eg.db, keyType = 'ENTREZID')
kegg_enrich <- data.frame(kegg_enrich@result)
View(kegg_enrich)
mle_result_significant <- filter(mle_result, mle_result$PTX.wald.fdr < 0.05)
id_list <- TransGeneID(mle_result_significant$Gene, 'Symbol', 'Entrez')
id_list <- na.omit(id_list)
# perform go enrichment
go_enrich <- enrichGO(
gene = id_list,
OrgDb = org.Hs.eg.db,
keyType = 'ENTREZID',
ont = 'ALL',
pAdjustMethod = 'BH',
pvalueCutoff = 0.01,
qvalueCutoff = 0.05,
readable = T
)
go_enrich <- data.frame(go_enrich)
kegg_enrich <- enrichKEGG(
gene = id_list,
organism = 'hsa',
keyType = 'kegg',
pAdjustMethod = 'BH',
pvalueCutoff = 0.01,
qvalueCutoff = 0.05,
minGSSize = 2,
maxGSSize = 200,
use_internal_data = F
)
kegg_enrich <- setReadable(kegg_enrich, OrgDb = org.Hs.eg.db, keyType = 'ENTREZID')
kegg_enrich <- data.frame(kegg_enrich@result)
?FluteMLE
# cell_cycle normalization
FluteMLE('../all_test123.mle.gene_summary.txt', ctrlname = 'DMSO', treatname = 'PTX', pathview.top = 50, cell_lines = 'A549', top = 5, omitEssential = T, proj = 'all_123',
enrich_method = 'HGT', scale_cutoff = 2, verbose = T, posControl = The_list_of_core_essential_genes$hgnc_symbol, width = 12, height = 18)
View(kegg_enrich)
View(kegg_enrich)
neg_kegg_result <- read.csv('./MAGeCKFlute_all_123/Enrichment/GroupB_kegg_cell_cycle.txt', sep = '\t', header = T)
View(neg_kegg_result)
